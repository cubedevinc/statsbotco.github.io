{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","_ref","cubejsApi","title","query","render","react_default","a","createElement","Card","CardBody","CardTitle","tag","CardText","cubejs_react","_ref2","resultSet","className","cubejs","process","apiUrl","numberFormatter","item","numeral","format","dateFormatter","moment","renderSingleValue","key","height","chartPivot","App","Container","fluid","Row","Col","sm","src_Chart","measures","filters","dimension","operator","values","timeDimensions","dateRange","granularity","es6","width","data","dataKey","tickFormatter","labelFormatter","type","name","stroke","fill","dimensions","stackId","GithubCorner_default","size","href","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfe894d3.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardTitle, CardBody, CardText } from \"reactstrap\";\nimport { QueryRenderer } from \"@cubejs-client/react\";\n\nconst Chart = ({ cubejsApi, title, query, render }) => (\n  <Card>\n    <CardBody>\n      <CardTitle tag=\"h5\">{title}</CardTitle>\n      <CardText>\n        <QueryRenderer\n          query={query}\n          cubejsApi={cubejsApi}\n          render={({ resultSet }) => {\n            if (!resultSet) {\n              return <div className=\"loader\" />;\n            }\n\n            return render(resultSet);\n          }}\n        />\n      </CardText>\n    </CardBody>\n  </Card>\n);\n\nexport default Chart;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n  BarChart,\n  Bar\n} from \"recharts\";\nimport moment from \"moment\";\nimport numeral from \"numeral\";\nimport cubejs from \"@cubejs-client/core\";\nimport Chart from \"./Chart.js\";\nimport GithubCorner from 'react-github-corner';\n\nconst cubejsApi = cubejs(process.env.REACT_APP_CUBEJS_TOKEN, {\n  apiUrl: process.env.REACT_APP_API_URL\n});\nconst numberFormatter = item => numeral(item).format(\"0,0\");\nconst dateFormatter = item => moment(item).format(\"MMM YY\");\n\nconst renderSingleValue = (resultSet, key) => (\n  <h1 height={300}>{numberFormatter(resultSet.chartPivot()[0][key])}</h1>\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col sm=\"4\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"Total Users\"\n              query={{ measures: [\"Users.count\"] }}\n              render={resultSet => renderSingleValue(resultSet, \"Users.count\")}\n            />\n          </Col>\n          <Col sm=\"4\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"Total Orders\"\n              query={{ measures: [\"Orders.count\"] }}\n              render={resultSet => renderSingleValue(resultSet, \"Orders.count\")}\n            />\n          </Col>\n          <Col sm=\"4\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"Shipped Orders\"\n              query={{\n                measures: [\"Orders.count\"],\n                filters: [\n                  {\n                    dimension: \"Orders.status\",\n                    operator: \"equals\",\n                    values: [\"shipped\"]\n                  }\n                ]\n              }}\n              render={resultSet => renderSingleValue(resultSet, \"Orders.count\")}\n            />\n          </Col>\n        </Row>\n        <br />\n        <br />\n        <Row>\n          <Col sm=\"6\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"New Users Over Time\"\n              query={{\n                measures: [\"Users.count\"],\n                timeDimensions: [\n                  {\n                    dimension: \"Users.createdAt\",\n                    dateRange: [\"2017-01-01\", \"2018-12-31\"],\n                    granularity: \"month\"\n                  }\n                ]\n              }}\n              render={resultSet => (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={resultSet.chartPivot()}>\n                    <XAxis dataKey=\"category\" tickFormatter={dateFormatter} />\n                    <YAxis tickFormatter={numberFormatter} />\n                    <Tooltip labelFormatter={dateFormatter} />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"Users.count\"\n                      name=\"Users\"\n                      stroke=\"rgb(106, 110, 229)\"\n                      fill=\"rgba(106, 110, 229, .16)\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              )}\n            />\n          </Col>\n          <Col sm=\"6\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"Orders by Status Over Time\"\n              query={{\n                measures: [\"Orders.count\"],\n                dimensions: [\"Orders.status\"],\n                timeDimensions: [\n                  {\n                    dimension: \"Orders.createdAt\",\n                    dateRange: [\"2017-01-01\", \"2018-12-31\"],\n                    granularity: \"month\"\n                  }\n                ]\n              }}\n              render={resultSet => {\n                return (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={resultSet.chartPivot()}>\n                      <XAxis tickFormatter={dateFormatter} dataKey=\"x\" />\n                      <YAxis tickFormatter={numberFormatter} />\n                      <Bar\n                        stackId=\"a\"\n                        dataKey=\"shipped, Orders.count\"\n                        name=\"Shipped\"\n                        fill=\"#7DB3FF\"\n                      />\n                      <Bar\n                        stackId=\"a\"\n                        dataKey=\"processing, Orders.count\"\n                        name=\"Processing\"\n                        fill=\"#49457B\"\n                      />\n                      <Bar\n                        stackId=\"a\"\n                        dataKey=\"completed, Orders.count\"\n                        name=\"Completed\"\n                        fill=\"#FF7C78\"\n                      />\n                      <Legend />\n                      <Tooltip />\n                    </BarChart>\n                  </ResponsiveContainer>\n                );\n              }}\n            />\n          </Col>\n        </Row>\n        <GithubCorner size={120} href=\"https://github.com/statsbotco/cube.js/tree/master/examples/react-dashboard\" />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
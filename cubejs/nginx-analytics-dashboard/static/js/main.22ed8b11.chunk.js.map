{"version":3,"sources":["Chart.js","App.js","index.js"],"names":["Chart","_ref","cubejsApi","title","query","render","react_default","a","createElement","Card","CardBody","CardTitle","tag","CardText","cubejs_react","Object","objectSpread","timeDimensions","dimension","dateRange","_ref2","resultSet","className","cubejs","process","apiUrl","percentFormatter","item","numeral","format","dateFormatter","moment","COLORS","renderSingleValue","key","postFix","arguments","length","undefined","height","chartPivot","App","Container","fluid","Row","Col","sm","src_Chart","measures","granularity","es6","width","data","strokeDasharray","dataKey","tickFormatter","domain","labelFormatter","type","name","stroke","fill","dimensions","filters","operator","values","label","nameKey","map","entry","index","GithubCorner_default","size","href","Component","rootElement","document","getElementById","ReactDOM","src_App"],"mappings":"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","file":"static/js/main.22ed8b11.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardTitle, CardBody, CardText } from \"reactstrap\";\nimport { QueryRenderer } from \"@cubejs-client/react\";\n\nconst Chart = ({ cubejsApi, title, query, render }) => (\n  <Card>\n    <CardBody>\n      <CardTitle tag=\"h5\">{title}</CardTitle>\n      <CardText>\n        <QueryRenderer\n          query={{\n            timeDimensions: [\n              {\n                dimension: `Logs.createdAt`,\n                dateRange: [\"2019-04-01\", \"2019-04-09\"]\n              }\n            ],\n            ...query\n          }}\n          cubejsApi={cubejsApi}\n          render={({ resultSet }) => {\n            if (!resultSet) {\n              return <div className=\"loader\" />;\n            }\n\n            return render(resultSet);\n          }}\n        />\n      </CardText>\n    </CardBody>\n  </Card>\n);\n\nexport default Chart;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport {\n  LineChart,\n  CartesianGrid,\n  PieChart,\n  Pie,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n  Cell\n} from \"recharts\";\nimport GithubCorner from 'react-github-corner';\nimport moment from \"moment\";\nimport numeral from \"numeral\";\nimport cubejs from \"@cubejs-client/core\";\nimport Chart from \"./Chart.js\";\n\n\nconst cubejsApi = cubejs(process.env.REACT_APP_CUBEJS_TOKEN, {\n  apiUrl: process.env.REACT_APP_API_URL\n});\nconst numberFormatter = item => numeral(item).format(\"0,0\");\nconst percentFormatter = item => numeral(item / 100.0).format(\"0%\");\nconst dateFormatter = item => moment(item).format(\"MMM DD\");\n\nconst COLORS = [\n  \"#7DB3FF\",\n  \"#49457B\",\n  \"#FF7C78\",\n  \"#FED3D0\",\n  \"#6F76D9\",\n  \"#9ADFB4\",\n  \"#2E7987\"\n];\n\nconst renderSingleValue = (resultSet, key, postFix = \"\") => (\n  <h1 height={300}>\n    {numberFormatter(resultSet.chartPivot()[0][key])}\n    {postFix}\n  </h1>\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col sm=\"4\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"Total Requests\"\n              query={{ measures: [\"Logs.count\"] }}\n              render={resultSet => renderSingleValue(resultSet, \"Logs.count\")}\n            />\n          </Col>\n          <Col sm=\"4\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"Total Errors\"\n              query={{ measures: [\"Logs.errorCount\"] }}\n              render={resultSet =>\n                renderSingleValue(resultSet, \"Logs.errorCount\")\n              }\n            />\n          </Col>\n          <Col sm=\"4\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"Error Rate\"\n              query={{\n                measures: [\"Logs.errorRate\"]\n              }}\n              render={resultSet =>\n                renderSingleValue(resultSet, \"Logs.errorRate\", \"%\")\n              }\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col sm=\"6\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"Error Rate By Day\"\n              query={{\n                measures: [\"Logs.errorRate\"],\n                timeDimensions: [\n                  {\n                    dimension: \"Logs.createdAt\",\n                    dateRange: [\"2019-04-01\", \"2019-04-09\"],\n                    granularity: \"day\"\n                  }\n                ]\n              }}\n              render={resultSet => (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={resultSet.chartPivot()}>\n                    <CartesianGrid strokeDasharray=\"5 5\" />\n                    <XAxis dataKey=\"x\" tickFormatter={dateFormatter} />\n                    <YAxis\n                      domain={[\"dataMin - 1\", \"dataMax + 1\"]}\n                      tickFormatter={percentFormatter}\n                    />\n                    <Tooltip labelFormatter={dateFormatter} />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"Logs.errorRate\"\n                      name=\"Error Rate\"\n                      stroke=\"rgb(106, 110, 229)\"\n                      fill=\"rgba(106, 110, 229, .16)\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              )}\n            />\n          </Col>\n          <Col sm=\"6\">\n            <Chart\n              cubejsApi={cubejsApi}\n              title=\"Errors by Status\"\n              query={{\n                measures: [\"Logs.count\"],\n                dimensions: [\"Logs.status\"],\n                filters: [\n                  {\n                    dimension: `Logs.isError`,\n                    operator: `equals`,\n                    values: [\"Yes\"]\n                  }\n                ]\n              }}\n              render={resultSet => {\n                return (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        label\n                        nameKey=\"x\"\n                        dataKey=\"Logs.count\"\n                        data={resultSet.chartPivot()}\n                      >\n                        {resultSet.chartPivot().map((entry, index) => (\n                          <Cell fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Legend />\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                );\n              }}\n            />\n          </Col>\n        </Row>\n        <GithubCorner size={120} href=\"https://github.com/statsbotco/cube.js\" />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App.js\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}